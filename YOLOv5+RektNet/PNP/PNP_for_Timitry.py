import numpy as np
import cv2
import matplotlib.pyplot as plt
import pylab

object_points = \
    np.array([[-76.5, 35.0, 0.0],
              [-57.5, 135.0, 0.0],
              [-41.5, 217.0, 0.0],
              [0.0, 315.0, 0.0],  # измеренные ниточкой
              [41.5, 217.0, 0.0],
              [57.5, 135.0, 0.0],
              [76.5, 35.0, 0.0]])

camera_matrix = \
np.array([[1.23545009e+04, 0.00000000e+00, 2.58341620e+03],
 [0.00000000e+00, 1.23061597e+04, 1.84962712e+03],
 [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]])

dist_coefs = np.array([[-3.25510433e-02,  1.72721426e+00,  2.49348810e-03, -1.17702375e-04,  -8.69239383e+00]])

img = cv2.imread('./images/canon_cones/1.JPG')

keyp_list = np.zeros((5, 7, 2))  # Здесь массив ключевых точек в пикселях (float), полученный с Key-Point_Regression,
                                 # например, [[[1196. 2040.],[1242., 1826.],[1271., 1672.],[1358., 1464.],[1438., 1673.],[1468., 1831.],[1514. 2036.]],
                                             #[[2374., 2039.],[2428., 1769.],[2475., 1547.],[2579., 1266.],[2685., 1545.],[2731., 1765.],[2790., 2041.]],
                                             #[[3651., 2034.],[3698., 1828.],[3725., 1669.],[3801., 1460.],[3891., 1666.],[3921., 1826.],[3972., 2029.]],
                                             #[[2287., 2046.],[2357., 1637.],[2429., 1300.],[2586.,  899.],[2743., 1296.],[2811., 1634.],[2900., 2034.]],
                                             #[[4020., 2034.],[4072., 1759.],[4110., 1550.],[4219., 1266.],[4330., 1543.],[4371., 1752.],[4439., 2030.]]]

l = len(keyp_list)  # количество конусов на изоражении
m = 0

for i in range(0, l):
    keyp_list[i] = sorted(keyp_list[i], key=lambda k: k[0]) # располагаем ключевые точки в правильном порядке (слева-направо)
                                                            # это важно при нахождении соответсвий 2д-3д точек в SolvePNP
keyp_list_np = np.array(keyp_list)


XYZ_list = np.zeros((l, 3, 1)) # Итоговый массив с координатами конусов отностельно камеры

for i in range(0, l):
    ret, rvec, tvec = cv2.solvePnP(object_points, keyp_list_np[i], camera_matrix, dist_coefs)
    XYZ_list[i] = tvec
    print('XYZ_list of cone ', i+1, ': ',XYZ_list[i], sep = '') # Выводим координаты конусов

#####################################################
fig = plt.figure()
ax1 = fig.add_subplot(121)
ax1.grid(True)
clr = "blue"                     # Этот блок кода для визуализации положения конуса/конусов относительно камеры
                                 # Можно выкинуть целиком, если не нужен.
for i in range(0,l):
    ax1.scatter(XYZ_list[i][0], XYZ_list[i][2], s=None, c=clr)
ax1.plot(np.array([0,0,0,0,0]), np.array([0,0,0,0,0]))
pylab.show()
##################################################